# options for analysis running
run:
  # default concurrency is an available CPU number
  concurrency: 4

  # timeout for analysis, e.g., 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # List of build tags, all linters use it. Default is empty list.
  build-tags: [ ]

  # By default, isn't set. If set we pass it to "go list -mod={option}".
  # From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  # default is "colored-line-number"
  formats:
   - format: colored-line-number
     path: stdout

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name at the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: true


# all available settings of specific linters
linters-settings:
  cyclop:
    # the maximal code complexity to report
    max-complexity: 20
    # The maximal average package complexity. If it's higher than 0.0 (float), the check is enabled (default 0.0)
    package-average: 0.0
    # should ignore tests (default false)
    skip-tests: false

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # list of functions to exclude from checking, where each entry is a single function to exclude.
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    errorf: true
    # Check for plain type assertions and type switches
    asserts: true
    # Check for plain error comparisons
    comparison: true

  forbidigo:
    # Forbid the following identifiers (identifiers are written using regexp):
    forbid:
      - ^print.*$
      - 'fmt\.Print.*'
      - ^spew\.Dump$
    # Exclude godoc examples from forbidigo checks. Default is true.

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  gosec:
    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    excludes:
      # Look for bad TLS connection settings
      # Disable it, since we don't use encrypted connection for inter-service communication.
      - G402
      # Poor file permissions used when writing to a new file
      # We only write files in codegen utils. So, there is no sense to set permissions 600 fot a new file.
      - G306
      # Insecure random number source (rand)
      # We don't actually need a crypto-safe random numbers.
      - G404

  govet:
    # settings per analyzer
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    # run `go tool vet help` to see all analyzers
    enable: [ ]
    enable-all: true
    disable:
      - fieldalignment
    disable-all: false

  makezero:
    # Allow only slices initialized with a length of zero. Default is false.
    always: false

  predeclared:
    # comma-separated list of predeclared identifiers to not report on
    ignore: ""
    # include method names and field names (i.e., qualified names) in checks
    q: false

  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: true
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: true
    # Mark all exported identifiers as used.
    # Default: true
    exported-is-used: true
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: true
    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: true
    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: true

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed
    default-signifies-exhaustive: true
    # enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness
    ignore-enum-members: ""
    # consider enums only in package scopes, not in inner scopes
    package-scope-only: false

  funlen:
    lines: 60
    statements: 40

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimum occurrences of constant string count to trigger issue, 3 by default
    min-occurrences: 3
    # ignore test files, false by default
    ignore-tests: true
    # look for existing constants matching the values, true by default
    match-constant: true
    # search also for duplicated numbers, false by default
    numbers: false
    # minimum value, only works with goconst.numbers, 3 by default
    min: 3
    # maximum value, only works with goconst.numbers, 3 by default
    max: 3
    # ignore when constant is not used as function argument, true by default
    ignore-calls: true

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/headframe-io

  gosimple:
    # Select the Go version to target. The default is '1.13'.
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 5

  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 6

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

linters:
  enable-all: true
  disable-all: false
  disable:
    - exhaustive
    - cyclop
    - depguard
    - gci
    - golint
    - err113
    - nlreturn
    - revive
    - perfsprint # FIXME
    - ireturn
    - dupl
    - varnamelen
    - stylecheck
    - exhaustivestruct # FIXME
    - exhaustruct # FIXME
    - wrapcheck
    - wsl
    - gomnd
    - forcetypeassert # FIXME
    - godot
    - nilnil  # FIXME
    - nonamedreturns
    - maintidx
    - funlen
    - gochecknoglobals
    - gocognit
    - nosnakecase
    - maligned # FIXME
    - mnd
    - execinquery
  fast: false

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude: [ ]

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - bodyclose
        - forcetypeassert
        - dupl
        - gomnd
        - gochecknoglobals
        - goconst
        - funlen
        - noctx

    # disable errorlint for exact ErrStopped error, used in main.go to determine when app is manually stopped
    - path: 'commands/.*\.go'
      linters:
        - errorlint
      source: 'ErrStopped'

    - path: 'commands/.*\.go'
      linters:
        - funlen
        - gochecknoglobals

    - path: 'main\.go'
      linters:
        - funlen
        - gochecknoglobals

    - path: _test\.go
      linters:
        - gosec
      # G107: Potential HTTP request made with variable url
      # We need to suppress it in tests for helper functions purpose.
      text: G107

    - path: 'hash/md5\.go'
      linters:
        - gosec
      # G501: Import blocklist: crypto/md5
      # G401: Detect the usage of DES, RC4, MD5 or SHA1
      text: (G501|G401)

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable. By default it's empty.
  include: [ ]

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  new-from-rev: ""

  # Show only new issues created in git patch with set file path.
  new-from-patch: ""

  # Fix found issues (if it's supported by the linter)
  fix: false

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  default-severity: error

  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false
