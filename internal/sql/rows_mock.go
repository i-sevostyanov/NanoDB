// Code generated by MockGen. DO NOT EDIT.
// Source: rows.go
//
// Generated by this command:
//
//	mockgen -typed -source=rows.go -destination ./rows_mock.go -package sql
//

// Package sql is a generated GoMock package.
package sql

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRowIter is a mock of RowIter interface.
type MockRowIter struct {
	ctrl     *gomock.Controller
	recorder *MockRowIterMockRecorder
}

// MockRowIterMockRecorder is the mock recorder for MockRowIter.
type MockRowIterMockRecorder struct {
	mock *MockRowIter
}

// NewMockRowIter creates a new mock instance.
func NewMockRowIter(ctrl *gomock.Controller) *MockRowIter {
	mock := &MockRowIter{ctrl: ctrl}
	mock.recorder = &MockRowIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowIter) EXPECT() *MockRowIterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRowIter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRowIterMockRecorder) Close() *MockRowIterCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowIter)(nil).Close))
	return &MockRowIterCloseCall{Call: call}
}

// MockRowIterCloseCall wrap *gomock.Call
type MockRowIterCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRowIterCloseCall) Return(arg0 error) *MockRowIterCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRowIterCloseCall) Do(f func() error) *MockRowIterCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRowIterCloseCall) DoAndReturn(f func() error) *MockRowIterCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Next mocks base method.
func (m *MockRowIter) Next() (Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockRowIterMockRecorder) Next() *MockRowIterNextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowIter)(nil).Next))
	return &MockRowIterNextCall{Call: call}
}

// MockRowIterNextCall wrap *gomock.Call
type MockRowIterNextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRowIterNextCall) Return(arg0 Row, arg1 error) *MockRowIterNextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRowIterNextCall) Do(f func() (Row, error)) *MockRowIterNextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRowIterNextCall) DoAndReturn(f func() (Row, error)) *MockRowIterNextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
