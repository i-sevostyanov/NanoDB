// Code generated by MockGen. DO NOT EDIT.
// Source: drop.go
//
// Generated by this command:
//
//	mockgen -typed -source=drop.go -destination ./drop_mock_test.go -package plan_test
//

// Package plan_test is a generated GoMock package.
package plan_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseDropper is a mock of DatabaseDropper interface.
type MockDatabaseDropper struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseDropperMockRecorder
}

// MockDatabaseDropperMockRecorder is the mock recorder for MockDatabaseDropper.
type MockDatabaseDropperMockRecorder struct {
	mock *MockDatabaseDropper
}

// NewMockDatabaseDropper creates a new mock instance.
func NewMockDatabaseDropper(ctrl *gomock.Controller) *MockDatabaseDropper {
	mock := &MockDatabaseDropper{ctrl: ctrl}
	mock.recorder = &MockDatabaseDropperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseDropper) EXPECT() *MockDatabaseDropperMockRecorder {
	return m.recorder
}

// DropDatabase mocks base method.
func (m *MockDatabaseDropper) DropDatabase(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockDatabaseDropperMockRecorder) DropDatabase(name any) *MockDatabaseDropperDropDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockDatabaseDropper)(nil).DropDatabase), name)
	return &MockDatabaseDropperDropDatabaseCall{Call: call}
}

// MockDatabaseDropperDropDatabaseCall wrap *gomock.Call
type MockDatabaseDropperDropDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseDropperDropDatabaseCall) Return(arg0 error) *MockDatabaseDropperDropDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseDropperDropDatabaseCall) Do(f func(string) error) *MockDatabaseDropperDropDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseDropperDropDatabaseCall) DoAndReturn(f func(string) error) *MockDatabaseDropperDropDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTableDropper is a mock of TableDropper interface.
type MockTableDropper struct {
	ctrl     *gomock.Controller
	recorder *MockTableDropperMockRecorder
}

// MockTableDropperMockRecorder is the mock recorder for MockTableDropper.
type MockTableDropperMockRecorder struct {
	mock *MockTableDropper
}

// NewMockTableDropper creates a new mock instance.
func NewMockTableDropper(ctrl *gomock.Controller) *MockTableDropper {
	mock := &MockTableDropper{ctrl: ctrl}
	mock.recorder = &MockTableDropperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableDropper) EXPECT() *MockTableDropperMockRecorder {
	return m.recorder
}

// DropTable mocks base method.
func (m *MockTableDropper) DropTable(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockTableDropperMockRecorder) DropTable(name any) *MockTableDropperDropTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockTableDropper)(nil).DropTable), name)
	return &MockTableDropperDropTableCall{Call: call}
}

// MockTableDropperDropTableCall wrap *gomock.Call
type MockTableDropperDropTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableDropperDropTableCall) Return(arg0 error) *MockTableDropperDropTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableDropperDropTableCall) Do(f func(string) error) *MockTableDropperDropTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableDropperDropTableCall) DoAndReturn(f func(string) error) *MockTableDropperDropTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
