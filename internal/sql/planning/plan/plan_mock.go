// Code generated by MockGen. DO NOT EDIT.
// Source: plan.go

// Package plan is a generated GoMock package.
package plan

import (
	gomock "github.com/golang/mock/gomock"
	sql "github.com/i-sevostyanov/NanoDB/internal/sql"
	reflect "reflect"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockNode) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockNodeMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockNode)(nil).Columns))
}

// RowIter mocks base method
func (m *MockNode) RowIter() (sql.RowIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowIter")
	ret0, _ := ret[0].(sql.RowIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowIter indicates an expected call of RowIter
func (mr *MockNodeMockRecorder) RowIter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowIter", reflect.TypeOf((*MockNode)(nil).RowIter))
}
