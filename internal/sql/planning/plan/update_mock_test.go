// Code generated by MockGen. DO NOT EDIT.
// Source: update.go
//
// Generated by this command:
//
//	mockgen -typed -source=update.go -destination ./update_mock_test.go -package plan_test
//

// Package plan_test is a generated GoMock package.
package plan_test

import (
	reflect "reflect"

	sql "github.com/i-sevostyanov/NanoDB/internal/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockRowUpdater is a mock of RowUpdater interface.
type MockRowUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRowUpdaterMockRecorder
}

// MockRowUpdaterMockRecorder is the mock recorder for MockRowUpdater.
type MockRowUpdaterMockRecorder struct {
	mock *MockRowUpdater
}

// NewMockRowUpdater creates a new mock instance.
func NewMockRowUpdater(ctrl *gomock.Controller) *MockRowUpdater {
	mock := &MockRowUpdater{ctrl: ctrl}
	mock.recorder = &MockRowUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowUpdater) EXPECT() *MockRowUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRowUpdater) Update(key int64, row sql.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRowUpdaterMockRecorder) Update(key, row any) *MockRowUpdaterUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRowUpdater)(nil).Update), key, row)
	return &MockRowUpdaterUpdateCall{Call: call}
}

// MockRowUpdaterUpdateCall wrap *gomock.Call
type MockRowUpdaterUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRowUpdaterUpdateCall) Return(arg0 error) *MockRowUpdaterUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRowUpdaterUpdateCall) Do(f func(int64, sql.Row) error) *MockRowUpdaterUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRowUpdaterUpdateCall) DoAndReturn(f func(int64, sql.Row) error) *MockRowUpdaterUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
