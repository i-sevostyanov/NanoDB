// Code generated by MockGen. DO NOT EDIT.
// Source: delete.go
//
// Generated by this command:
//
//	mockgen -typed -source=delete.go -destination ./delete_mock_test.go -package plan_test
//

// Package plan_test is a generated GoMock package.
package plan_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRowDeleter is a mock of RowDeleter interface.
type MockRowDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRowDeleterMockRecorder
}

// MockRowDeleterMockRecorder is the mock recorder for MockRowDeleter.
type MockRowDeleterMockRecorder struct {
	mock *MockRowDeleter
}

// NewMockRowDeleter creates a new mock instance.
func NewMockRowDeleter(ctrl *gomock.Controller) *MockRowDeleter {
	mock := &MockRowDeleter{ctrl: ctrl}
	mock.recorder = &MockRowDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowDeleter) EXPECT() *MockRowDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRowDeleter) Delete(key int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRowDeleterMockRecorder) Delete(key any) *MockRowDeleterDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRowDeleter)(nil).Delete), key)
	return &MockRowDeleterDeleteCall{Call: call}
}

// MockRowDeleterDeleteCall wrap *gomock.Call
type MockRowDeleterDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRowDeleterDeleteCall) Return(arg0 error) *MockRowDeleterDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRowDeleterDeleteCall) Do(f func(int64) error) *MockRowDeleterDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRowDeleterDeleteCall) DoAndReturn(f func(int64) error) *MockRowDeleterDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
