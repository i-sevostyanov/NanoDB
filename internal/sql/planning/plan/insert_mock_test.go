// Code generated by MockGen. DO NOT EDIT.
// Source: insert.go

// Package plan_test is a generated GoMock package.
package plan_test

import (
	gomock "github.com/golang/mock/gomock"
	sql "github.com/i-sevostyanov/NanoDB/internal/sql"
	reflect "reflect"
)

// MockTableInserter is a mock of TableInserter interface
type MockTableInserter struct {
	ctrl     *gomock.Controller
	recorder *MockTableInserterMockRecorder
}

// MockTableInserterMockRecorder is the mock recorder for MockTableInserter
type MockTableInserterMockRecorder struct {
	mock *MockTableInserter
}

// NewMockTableInserter creates a new mock instance
func NewMockTableInserter(ctrl *gomock.Controller) *MockTableInserter {
	mock := &MockTableInserter{ctrl: ctrl}
	mock.recorder = &MockTableInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTableInserter) EXPECT() *MockTableInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockTableInserter) Insert(row sql.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTableInserterMockRecorder) Insert(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTableInserter)(nil).Insert), row)
}
