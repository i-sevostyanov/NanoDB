// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package sql is a generated GoMock package.
package sql

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCatalog is a mock of Catalog interface
type MockCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogMockRecorder
}

// MockCatalogMockRecorder is the mock recorder for MockCatalog
type MockCatalogMockRecorder struct {
	mock *MockCatalog
}

// NewMockCatalog creates a new mock instance
func NewMockCatalog(ctrl *gomock.Controller) *MockCatalog {
	mock := &MockCatalog{ctrl: ctrl}
	mock.recorder = &MockCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatalog) EXPECT() *MockCatalogMockRecorder {
	return m.recorder
}

// GetDatabase mocks base method
func (m *MockCatalog) GetDatabase(name string) (Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", name)
	ret0, _ := ret[0].(Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase
func (mr *MockCatalogMockRecorder) GetDatabase(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockCatalog)(nil).GetDatabase), name)
}

// ListDatabases mocks base method
func (m *MockCatalog) ListDatabases() ([]Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases")
	ret0, _ := ret[0].([]Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases
func (mr *MockCatalogMockRecorder) ListDatabases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockCatalog)(nil).ListDatabases))
}

// CreateDatabase mocks base method
func (m *MockCatalog) CreateDatabase(name string) (Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", name)
	ret0, _ := ret[0].(Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase
func (mr *MockCatalogMockRecorder) CreateDatabase(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockCatalog)(nil).CreateDatabase), name)
}

// DropDatabase mocks base method
func (m *MockCatalog) DropDatabase(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase
func (mr *MockCatalogMockRecorder) DropDatabase(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockCatalog)(nil).DropDatabase), name)
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockDatabase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDatabaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
}

// GetTable mocks base method
func (m *MockDatabase) GetTable(name string) (Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", name)
	ret0, _ := ret[0].(Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable
func (mr *MockDatabaseMockRecorder) GetTable(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockDatabase)(nil).GetTable), name)
}

// ListTables mocks base method
func (m *MockDatabase) ListTables() []Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables")
	ret0, _ := ret[0].([]Table)
	return ret0
}

// ListTables indicates an expected call of ListTables
func (mr *MockDatabaseMockRecorder) ListTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockDatabase)(nil).ListTables))
}

// CreateTable mocks base method
func (m *MockDatabase) CreateTable(name string, scheme Scheme) (Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", name, scheme)
	ret0, _ := ret[0].(Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockDatabaseMockRecorder) CreateTable(name, scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDatabase)(nil).CreateTable), name, scheme)
}

// DropTable mocks base method
func (m *MockDatabase) DropTable(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockDatabaseMockRecorder) DropTable(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockDatabase)(nil).DropTable), name)
}

// MockTable is a mock of Table interface
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockTable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockTableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTable)(nil).Name))
}

// Scheme mocks base method
func (m *MockTable) Scheme() Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme
func (mr *MockTableMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockTable)(nil).Scheme))
}

// PrimaryKey mocks base method
func (m *MockTable) PrimaryKey() Column {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryKey")
	ret0, _ := ret[0].(Column)
	return ret0
}

// PrimaryKey indicates an expected call of PrimaryKey
func (mr *MockTableMockRecorder) PrimaryKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryKey", reflect.TypeOf((*MockTable)(nil).PrimaryKey))
}

// Sequence mocks base method
func (m *MockTable) Sequence() Sequence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequence")
	ret0, _ := ret[0].(Sequence)
	return ret0
}

// Sequence indicates an expected call of Sequence
func (mr *MockTableMockRecorder) Sequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequence", reflect.TypeOf((*MockTable)(nil).Sequence))
}

// RowIter mocks base method
func (m *MockTable) RowIter() (RowIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowIter")
	ret0, _ := ret[0].(RowIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowIter indicates an expected call of RowIter
func (mr *MockTableMockRecorder) RowIter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowIter", reflect.TypeOf((*MockTable)(nil).RowIter))
}

// Insert mocks base method
func (m *MockTable) Insert(row Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTableMockRecorder) Insert(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTable)(nil).Insert), row)
}

// Delete mocks base method
func (m *MockTable) Delete(key int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTableMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTable)(nil).Delete), key)
}

// Update mocks base method
func (m *MockTable) Update(key int64, row Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTableMockRecorder) Update(key, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTable)(nil).Update), key, row)
}

// MockSequence is a mock of Sequence interface
type MockSequence struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceMockRecorder
}

// MockSequenceMockRecorder is the mock recorder for MockSequence
type MockSequenceMockRecorder struct {
	mock *MockSequence
}

// NewMockSequence creates a new mock instance
func NewMockSequence(ctrl *gomock.Controller) *MockSequence {
	mock := &MockSequence{ctrl: ctrl}
	mock.recorder = &MockSequenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSequence) EXPECT() *MockSequenceMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockSequence) Next() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSequenceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSequence)(nil).Next))
}
