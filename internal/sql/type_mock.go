// Code generated by MockGen. DO NOT EDIT.
// Source: type.go
//
// Generated by this command:
//
//	mockgen -typed -source=type.go -destination ./type_mock.go -package sql
//

// Package sql is a generated GoMock package.
package sql

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCatalog is a mock of Catalog interface.
type MockCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogMockRecorder
}

// MockCatalogMockRecorder is the mock recorder for MockCatalog.
type MockCatalogMockRecorder struct {
	mock *MockCatalog
}

// NewMockCatalog creates a new mock instance.
func NewMockCatalog(ctrl *gomock.Controller) *MockCatalog {
	mock := &MockCatalog{ctrl: ctrl}
	mock.recorder = &MockCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalog) EXPECT() *MockCatalogMockRecorder {
	return m.recorder
}

// CreateDatabase mocks base method.
func (m *MockCatalog) CreateDatabase(name string) (Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", name)
	ret0, _ := ret[0].(Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockCatalogMockRecorder) CreateDatabase(name any) *MockCatalogCreateDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockCatalog)(nil).CreateDatabase), name)
	return &MockCatalogCreateDatabaseCall{Call: call}
}

// MockCatalogCreateDatabaseCall wrap *gomock.Call
type MockCatalogCreateDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCatalogCreateDatabaseCall) Return(arg0 Database, arg1 error) *MockCatalogCreateDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCatalogCreateDatabaseCall) Do(f func(string) (Database, error)) *MockCatalogCreateDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCatalogCreateDatabaseCall) DoAndReturn(f func(string) (Database, error)) *MockCatalogCreateDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DropDatabase mocks base method.
func (m *MockCatalog) DropDatabase(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockCatalogMockRecorder) DropDatabase(name any) *MockCatalogDropDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockCatalog)(nil).DropDatabase), name)
	return &MockCatalogDropDatabaseCall{Call: call}
}

// MockCatalogDropDatabaseCall wrap *gomock.Call
type MockCatalogDropDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCatalogDropDatabaseCall) Return(arg0 error) *MockCatalogDropDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCatalogDropDatabaseCall) Do(f func(string) error) *MockCatalogDropDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCatalogDropDatabaseCall) DoAndReturn(f func(string) error) *MockCatalogDropDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDatabase mocks base method.
func (m *MockCatalog) GetDatabase(name string) (Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", name)
	ret0, _ := ret[0].(Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockCatalogMockRecorder) GetDatabase(name any) *MockCatalogGetDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockCatalog)(nil).GetDatabase), name)
	return &MockCatalogGetDatabaseCall{Call: call}
}

// MockCatalogGetDatabaseCall wrap *gomock.Call
type MockCatalogGetDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCatalogGetDatabaseCall) Return(arg0 Database, arg1 error) *MockCatalogGetDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCatalogGetDatabaseCall) Do(f func(string) (Database, error)) *MockCatalogGetDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCatalogGetDatabaseCall) DoAndReturn(f func(string) (Database, error)) *MockCatalogGetDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDatabases mocks base method.
func (m *MockCatalog) ListDatabases() ([]Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases")
	ret0, _ := ret[0].([]Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockCatalogMockRecorder) ListDatabases() *MockCatalogListDatabasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockCatalog)(nil).ListDatabases))
	return &MockCatalogListDatabasesCall{Call: call}
}

// MockCatalogListDatabasesCall wrap *gomock.Call
type MockCatalogListDatabasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCatalogListDatabasesCall) Return(arg0 []Database, arg1 error) *MockCatalogListDatabasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCatalogListDatabasesCall) Do(f func() ([]Database, error)) *MockCatalogListDatabasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCatalogListDatabasesCall) DoAndReturn(f func() ([]Database, error)) *MockCatalogListDatabasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockDatabase) CreateTable(name string, scheme Scheme) (Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", name, scheme)
	ret0, _ := ret[0].(Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDatabaseMockRecorder) CreateTable(name, scheme any) *MockDatabaseCreateTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDatabase)(nil).CreateTable), name, scheme)
	return &MockDatabaseCreateTableCall{Call: call}
}

// MockDatabaseCreateTableCall wrap *gomock.Call
type MockDatabaseCreateTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseCreateTableCall) Return(arg0 Table, arg1 error) *MockDatabaseCreateTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseCreateTableCall) Do(f func(string, Scheme) (Table, error)) *MockDatabaseCreateTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseCreateTableCall) DoAndReturn(f func(string, Scheme) (Table, error)) *MockDatabaseCreateTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DropTable mocks base method.
func (m *MockDatabase) DropTable(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockDatabaseMockRecorder) DropTable(name any) *MockDatabaseDropTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockDatabase)(nil).DropTable), name)
	return &MockDatabaseDropTableCall{Call: call}
}

// MockDatabaseDropTableCall wrap *gomock.Call
type MockDatabaseDropTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseDropTableCall) Return(arg0 error) *MockDatabaseDropTableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseDropTableCall) Do(f func(string) error) *MockDatabaseDropTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseDropTableCall) DoAndReturn(f func(string) error) *MockDatabaseDropTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTable mocks base method.
func (m *MockDatabase) GetTable(name string) (Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", name)
	ret0, _ := ret[0].(Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockDatabaseMockRecorder) GetTable(name any) *MockDatabaseGetTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockDatabase)(nil).GetTable), name)
	return &MockDatabaseGetTableCall{Call: call}
}

// MockDatabaseGetTableCall wrap *gomock.Call
type MockDatabaseGetTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseGetTableCall) Return(arg0 Table, arg1 error) *MockDatabaseGetTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseGetTableCall) Do(f func(string) (Table, error)) *MockDatabaseGetTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseGetTableCall) DoAndReturn(f func(string) (Table, error)) *MockDatabaseGetTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTables mocks base method.
func (m *MockDatabase) ListTables() []Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables")
	ret0, _ := ret[0].([]Table)
	return ret0
}

// ListTables indicates an expected call of ListTables.
func (mr *MockDatabaseMockRecorder) ListTables() *MockDatabaseListTablesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockDatabase)(nil).ListTables))
	return &MockDatabaseListTablesCall{Call: call}
}

// MockDatabaseListTablesCall wrap *gomock.Call
type MockDatabaseListTablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseListTablesCall) Return(arg0 []Table) *MockDatabaseListTablesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseListTablesCall) Do(f func() []Table) *MockDatabaseListTablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseListTablesCall) DoAndReturn(f func() []Table) *MockDatabaseListTablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockDatabase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDatabaseMockRecorder) Name() *MockDatabaseNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
	return &MockDatabaseNameCall{Call: call}
}

// MockDatabaseNameCall wrap *gomock.Call
type MockDatabaseNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseNameCall) Return(arg0 string) *MockDatabaseNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseNameCall) Do(f func() string) *MockDatabaseNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseNameCall) DoAndReturn(f func() string) *MockDatabaseNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTable) Delete(key int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTableMockRecorder) Delete(key any) *MockTableDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTable)(nil).Delete), key)
	return &MockTableDeleteCall{Call: call}
}

// MockTableDeleteCall wrap *gomock.Call
type MockTableDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableDeleteCall) Return(arg0 error) *MockTableDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableDeleteCall) Do(f func(int64) error) *MockTableDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableDeleteCall) DoAndReturn(f func(int64) error) *MockTableDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Insert mocks base method.
func (m *MockTable) Insert(key int64, row Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTableMockRecorder) Insert(key, row any) *MockTableInsertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTable)(nil).Insert), key, row)
	return &MockTableInsertCall{Call: call}
}

// MockTableInsertCall wrap *gomock.Call
type MockTableInsertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableInsertCall) Return(arg0 error) *MockTableInsertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableInsertCall) Do(f func(int64, Row) error) *MockTableInsertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableInsertCall) DoAndReturn(f func(int64, Row) error) *MockTableInsertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockTable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTableMockRecorder) Name() *MockTableNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTable)(nil).Name))
	return &MockTableNameCall{Call: call}
}

// MockTableNameCall wrap *gomock.Call
type MockTableNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableNameCall) Return(arg0 string) *MockTableNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableNameCall) Do(f func() string) *MockTableNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableNameCall) DoAndReturn(f func() string) *MockTableNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrimaryKey mocks base method.
func (m *MockTable) PrimaryKey() Column {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryKey")
	ret0, _ := ret[0].(Column)
	return ret0
}

// PrimaryKey indicates an expected call of PrimaryKey.
func (mr *MockTableMockRecorder) PrimaryKey() *MockTablePrimaryKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryKey", reflect.TypeOf((*MockTable)(nil).PrimaryKey))
	return &MockTablePrimaryKeyCall{Call: call}
}

// MockTablePrimaryKeyCall wrap *gomock.Call
type MockTablePrimaryKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTablePrimaryKeyCall) Return(arg0 Column) *MockTablePrimaryKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTablePrimaryKeyCall) Do(f func() Column) *MockTablePrimaryKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTablePrimaryKeyCall) DoAndReturn(f func() Column) *MockTablePrimaryKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Scan mocks base method.
func (m *MockTable) Scan() (RowIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(RowIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockTableMockRecorder) Scan() *MockTableScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockTable)(nil).Scan))
	return &MockTableScanCall{Call: call}
}

// MockTableScanCall wrap *gomock.Call
type MockTableScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableScanCall) Return(arg0 RowIter, arg1 error) *MockTableScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableScanCall) Do(f func() (RowIter, error)) *MockTableScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableScanCall) DoAndReturn(f func() (RowIter, error)) *MockTableScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Scheme mocks base method.
func (m *MockTable) Scheme() Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockTableMockRecorder) Scheme() *MockTableSchemeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockTable)(nil).Scheme))
	return &MockTableSchemeCall{Call: call}
}

// MockTableSchemeCall wrap *gomock.Call
type MockTableSchemeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableSchemeCall) Return(arg0 Scheme) *MockTableSchemeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableSchemeCall) Do(f func() Scheme) *MockTableSchemeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableSchemeCall) DoAndReturn(f func() Scheme) *MockTableSchemeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sequence mocks base method.
func (m *MockTable) Sequence() Sequence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequence")
	ret0, _ := ret[0].(Sequence)
	return ret0
}

// Sequence indicates an expected call of Sequence.
func (mr *MockTableMockRecorder) Sequence() *MockTableSequenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequence", reflect.TypeOf((*MockTable)(nil).Sequence))
	return &MockTableSequenceCall{Call: call}
}

// MockTableSequenceCall wrap *gomock.Call
type MockTableSequenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableSequenceCall) Return(arg0 Sequence) *MockTableSequenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableSequenceCall) Do(f func() Sequence) *MockTableSequenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableSequenceCall) DoAndReturn(f func() Sequence) *MockTableSequenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTable) Update(key int64, row Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTableMockRecorder) Update(key, row any) *MockTableUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTable)(nil).Update), key, row)
	return &MockTableUpdateCall{Call: call}
}

// MockTableUpdateCall wrap *gomock.Call
type MockTableUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTableUpdateCall) Return(arg0 error) *MockTableUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTableUpdateCall) Do(f func(int64, Row) error) *MockTableUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTableUpdateCall) DoAndReturn(f func(int64, Row) error) *MockTableUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSequence is a mock of Sequence interface.
type MockSequence struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceMockRecorder
}

// MockSequenceMockRecorder is the mock recorder for MockSequence.
type MockSequenceMockRecorder struct {
	mock *MockSequence
}

// NewMockSequence creates a new mock instance.
func NewMockSequence(ctrl *gomock.Controller) *MockSequence {
	mock := &MockSequence{ctrl: ctrl}
	mock.recorder = &MockSequenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequence) EXPECT() *MockSequenceMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSequence) Next() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSequenceMockRecorder) Next() *MockSequenceNextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSequence)(nil).Next))
	return &MockSequenceNextCall{Call: call}
}

// MockSequenceNextCall wrap *gomock.Call
type MockSequenceNextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSequenceNextCall) Return(arg0 int64) *MockSequenceNextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSequenceNextCall) Do(f func() int64) *MockSequenceNextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSequenceNextCall) DoAndReturn(f func() int64) *MockSequenceNextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
