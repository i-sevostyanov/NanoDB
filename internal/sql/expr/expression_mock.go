// Code generated by MockGen. DO NOT EDIT.
// Source: expression.go
//
// Generated by this command:
//
//	mockgen -typed -source=expression.go -destination ./expression_mock.go -package expr
//

// Package expr is a generated GoMock package.
package expr

import (
	reflect "reflect"

	sql "github.com/i-sevostyanov/NanoDB/internal/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockNode) Eval(row sql.Row) (sql.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", row)
	ret0, _ := ret[0].(sql.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eval indicates an expected call of Eval.
func (mr *MockNodeMockRecorder) Eval(row any) *MockNodeEvalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockNode)(nil).Eval), row)
	return &MockNodeEvalCall{Call: call}
}

// MockNodeEvalCall wrap *gomock.Call
type MockNodeEvalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeEvalCall) Return(arg0 sql.Value, arg1 error) *MockNodeEvalCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeEvalCall) Do(f func(sql.Row) (sql.Value, error)) *MockNodeEvalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeEvalCall) DoAndReturn(f func(sql.Row) (sql.Value, error)) *MockNodeEvalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockNode) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockNodeMockRecorder) String() *MockNodeStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockNode)(nil).String))
	return &MockNodeStringCall{Call: call}
}

// MockNodeStringCall wrap *gomock.Call
type MockNodeStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeStringCall) Return(arg0 string) *MockNodeStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeStringCall) Do(f func() string) *MockNodeStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeStringCall) DoAndReturn(f func() string) *MockNodeStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
