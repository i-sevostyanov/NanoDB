// Code generated by MockGen. DO NOT EDIT.
// Source: value.go
//
// Generated by this command:
//
//	mockgen -typed -source=value.go -destination ./value_mock.go -package sql
//

// Package sql is a generated GoMock package.
package sql

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockValue is a mock of Value interface.
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue.
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance.
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// DataType mocks base method.
func (m *MockValue) DataType() DataType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataType")
	ret0, _ := ret[0].(DataType)
	return ret0
}

// DataType indicates an expected call of DataType.
func (mr *MockValueMockRecorder) DataType() *MockValueDataTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataType", reflect.TypeOf((*MockValue)(nil).DataType))
	return &MockValueDataTypeCall{Call: call}
}

// MockValueDataTypeCall wrap *gomock.Call
type MockValueDataTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueDataTypeCall) Return(arg0 DataType) *MockValueDataTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueDataTypeCall) Do(f func() DataType) *MockValueDataTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueDataTypeCall) DoAndReturn(f func() DataType) *MockValueDataTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Raw mocks base method.
func (m *MockValue) Raw() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(any)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockValueMockRecorder) Raw() *MockValueRawCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockValue)(nil).Raw))
	return &MockValueRawCall{Call: call}
}

// MockValueRawCall wrap *gomock.Call
type MockValueRawCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueRawCall) Return(arg0 any) *MockValueRawCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueRawCall) Do(f func() any) *MockValueRawCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueRawCall) DoAndReturn(f func() any) *MockValueRawCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockValue) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockValueMockRecorder) String() *MockValueStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockValue)(nil).String))
	return &MockValueStringCall{Call: call}
}

// MockValueStringCall wrap *gomock.Call
type MockValueStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValueStringCall) Return(arg0 string) *MockValueStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValueStringCall) Do(f func() string) *MockValueStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValueStringCall) DoAndReturn(f func() string) *MockValueStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
